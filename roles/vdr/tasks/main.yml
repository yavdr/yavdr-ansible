---
# file: roles/vdr/tasks/main.yml

- name: apt | install basic vdr packages
  apt:
    name:
      - vdr
      - vdrctl
      - vdr-plugin-dbus2vdr
    state: present
    install_recommends: no
- name: add svdrp and svdrp-disc to /etc/services
  lineinfile:
    dest: /etc/services
    state: present
    line: "{{ item }}"
  loop:
    - "svdrp            6419/tcp"
    - "svdrp-disc       6419/udp"
- name: create vdr recdir
  file:
    state: directory
    owner: '{{ vdr.user }}'
    group: '{{ vdr.group }}'
    mode: 0775
    dest: '{{ vdr.recdir }}'

- name: set vdr charset override
  template:
    src: conf.d/02-vdr-charset-override.conf.j2
    dest: /etc/vdr/conf.d/02-vdr-charset-override.conf

- name: set option to use hide-first-recording-level patch
  template:
    src: conf.d/04-vdr-hide-first-recordinglevel.conf.j2
    dest: /etc/vdr/conf.d/04-vdr-hide-first-recordinglevel.conf

- name: set option to define recordings directory
  template:
    src: conf.d/06-vdr-recordings.conf.j2
    dest: /etc/vdr/conf.d/06-vdr-recordings.conf

- name: create local dir in recdir
  file:
    state: directory
    owner: '{{ vdr.user }}'
    group: '{{ vdr.group }}'
    mode: '0775'
    dest: '{{ vdr.recdir }}/local'
  when:
    vdr.hide_first_recording_level

# TODO: set recdir, user etc. in /etc/vdr/conf.d/
- name: apt | install additional vdr plugins
  apt:
    name: '{{ vdr_plugins }}'
    state: present
    install_recommends: no
  notify: [ 'Restart VDR' ]
- name: ensure vdr is stopped
  systemd:
    name: vdr.service
    state: stopped
  notify: [ 'Start VDR' ]

- name: "vdr configuration | copy remote.conf if it doesn't exist yet"
  copy:
    src: remote.conf
    dest: '{{ vdr.confdir }}/remote.conf'
    owner: '{{ vdr.user }}'
    group: '{{ vdr.group }}'
    mode: 0644
    force: no

- name: "vdr configuration | copy keymacros.conf"
  template:
    src: keymacros.conf.j2
    dest: '{{ vdr.etc_confdir }}/keymacros.conf'
    owner: '{{ vdr.user }}'
    group: '{{ vdr.group }}'
    mode: 0644
    force: yes

- name: "vdr configuration | copy channels.conf if it doesn't exist yet"
  copy:
    src: '{{ vdr_channels_conf }}'
    dest: '{{ vdr.confdir }}/channels.conf'
    owner: '{{ vdr.user }}'
    group: '{{ vdr.group }}'
    mode: 0644
    force: no
  when: vdr_channels_conf is defined

- name: "vdr configuration | download channels.conf if it doesn't exist yet"
  get_url:
    url: '{{ vdr_channels_conf_url }}'
    dest: '{{ vdr.confdir }}/channels.conf'
    owner: '{{ vdr.user }}'
    group: '{{ vdr.group }}'
    mode: 0644
    force: no
  when: vdr_channels_conf is not defined and vdr_channels_conf_url is defined

- name: "vdr configuration | svdrphosts.conf"
  template:
    src: templates/svdrphosts.conf.j2
    dest: '{{ vdr.etc_confdir }}/svdrphosts.conf'
    mode: 0644
  vars:
    svdrphosts: '{{ vdr_svdrphosts | default(vdr_allowed_hosts) }}'

- name: "vdr configuration | /etc/default/vdr"
  template:
    src: templates/default_vdr.j2
    dest: /etc/default/vdr
- name: ensure directory '/etc/vdr/xineliboutput' exists
  file:
    state: directory
    mode: 0775
    dest: '/etc/vdr/plugins/xineliboutput'

- name: "vdr configuration | allowed_hosts.conf for xineliboutput"
  template:
    src: templates/generic_allowed_hosts.conf.j2
    dest: '/etc/vdr/plugins/{{ vdr_service }}/allowed_hosts.conf'
    mode: 0644
  vars:
    allowed_hosts: '{{ xineliboutput_allowed_hosts | default(vdr_allowed_hosts) }}'
    vdr_service: xineliboutput

- name: "vdr configuration | xineliboutput.conf host settings"
  template:
    src: templates/xineliboutput.conf.j2
    dest: /etc/vdr/conf.avail/xineliboutput.conf
    mode: 0644
  vars:
    allowed_hosts: '{{ xineliboutput_allowed_hosts | default(vdr_allowed_hosts) }}'

- name: "disable/enable wait-for-dvb@.service for configured devices"
  systemd:
    enabled: '{{ "yes" if item in wait_for_dvb_devices|default([]) else "no" }}'
    name: 'wait-for-dvb@{{ item }}.service'
  loop: "{{ range(max_num_dvb_devices|default(16))|list }}"
- name: ensure directory '/etc/vdr/plugins/vnsiserver' exists
  file:
    state: directory
    mode: 0775
    dest: '/etc/vdr/plugins/vnsiserver'

- name: "vdr configuration | allowed_hosts.conf for vnsiserver"
  template:
    src: templates/generic_allowed_hosts.conf.j2
    dest: '/etc/vdr/plugins/{{ vdr_service }}/allowed_hosts.conf'
    mode: 0644
  vars:
    allowed_hosts: '{{ vnsiserver_allowed_hosts | default(vdr_allowed_hosts) }}'
    vdr_service: vnsiserver
- name: ensure directory '/etc/vdr/plugins' exists
  file:
    state: directory
    mode: 0775
    dest: '/etc/vdr/plugins/'

- name: "vdr configuration | streamdevhosts.conf for streamdev-server"
  template:
    src: templates/generic_allowed_hosts.conf.j2
    dest: '/etc/vdr/plugins/streamdevhosts.conf'
    mode: 0644
  vars:
    allowed_hosts: '{{ streamdev_server_allowed_hosts | default(vdr_allowed_hosts) }}'
    vdr_service: streamdev-server
- name: install and configure streamdev-client
  block:
    - name: apt | install vdr-plugin-streamdev-client
      apt:
        state: '{{ "present" if streamdev_client_remote_ip else "absent" }}'
        name: "vdr-plugin-streamdev-client"
    - name: set streamdev-client.RemoteIp
      lineinfile:
        state: '{{ "present" if streamdev_client_remote_ip else "absent" }}'
        owner: "{{ vdr.user }}"
        group: "{{ vdr.group }}"
        create: yes
        path : "{{ vdr.home }}/setup.conf"
        regexp: "^streamdev-client.RemoteIp"
        line: "streamdev-client.RemoteIp = {{ streamdev_client_remote_ip }}"

    - name: set streamdev-client.RemotePort
      lineinfile:
        owner: "{{ vdr.user }}"
        group: "{{ vdr.group }}"
        create: yes
        path : "{{ vdr.home }}/setup.conf"
        regexp: "^streamdev-client.RemotePort"
        line: "streamdev-client.RemotePort = {{ streamdev_client_remote_port | default(2004) }}"

    - name: set streamdev-client.NumProvidedSystems
      lineinfile:
        owner: "{{  vdr.user  }}"
        group: "{{  vdr.group }}"
        create: yes
        path : "{{ vdr.home }}/setup.conf"
        regexp: "^streamdev-client.NumProvidedSystems"
        line: "streamdev-client.NumProvidedSystems = {{ streamdev_client_num_provided_systems | default(1) }}"

    - name: set streamdev-client.StartClient
      lineinfile:
        owner: "{{ vdr.user }}"
        group: "{{ vdr.group }}"
        create: yes
        path : "{{ vdr.home }}/setup.conf"
        regexp: "^streamdev-client.StartClient"
        line: "streamdev-client.StartClient = {{ '1' if streamdev_client_remote_ip else '0' }}"
- name: create directory for vdr.service systemd drop-in files
  file:
    dest: '{{ item }}'
    state: directory
  loop:
    - "/etc/systemd/system/vdr.service.d/"

- name: systemd-drop-in | start vdr.service after network-online.target
  template:
    src: templates/systemd/network-online.j2
    dest: /etc/systemd/system/vdr.service.d/network-online.conf
  notify: ["Reload Units"]
- name: create snippet with yavdr commands
  template:
    src: templates/command-hooks/commands.yavdr.conf.j2
    dest: /usr/share/vdr/command-hooks/commands.yavdr.conf
- name: create helper scripts for reccmds
  copy:
    src: reccmds/{{ item }}.sh
    dest: /usr/local/bin/{{ item }}
    mode: 0755
  loop:
    - removeindex
    - removemarks
    - removeresume
    - vdr-recrepeat
- name: create snippet for yavdr reccmds to handle marks-, resume- and index-files
  template:
    src: reccmds.removemarks.conf.j2
    dest: /usr/share/vdr/command-hooks/reccmds.removemarks.conf

- name: create snippet for yavdr reccmds to search repeats using epgsearch
  template:
    src: reccmds.searchrepeats.conf.j2
    dest: /usr/share/vdr/command-hooks/reccmds.searchrepeats.conf
  when: '"vdr-plugin-epgsearch" in vdr_plugins'
