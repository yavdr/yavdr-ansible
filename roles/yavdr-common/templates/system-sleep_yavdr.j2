#!/usr/bin/bash
{{ ansible_managed | comment }}

case $1 in
  pre)
    # disable "_nfs.tcp" avahi announcements
    for file in /etc/avahi/services/*.service; do
        if grep -Fq "_nfs._tcp" "$file"; then
            echo "rename $file to ${file%%.*}.disabled"
            mv "$file" "${file%%.*}.disabled"
        fi
    done

    /bin/systemctl stop vdr
    /usr/bin/frontend-dbus-send shutdown_successfull
    {% if standby_reload_dvb %}
    echo "unload dvb drivers"
    /usr/local/bin/module-helper -u dvb_core
    {% endif %}
    {% if timezone_hw is defined %}/etc/init.d/hwclock.sh stop{% endif %}
    ;;
  post)
    {% if timezone_hw is defined %}/etc/init.d/hwclock.sh start{% endif %}
    # start current frontend again
    if [ -x /usr/bin/frontend-dbus-send ]
    then
        /usr/bin/frontend-dbus-send start ||:
    fi

    # reload rc-core keytables
    if [ -x /usr/bin/ir-keytable ]
    then
        for remote in $(ir-keytable 2>&1 | grep rc/rc | egrep -o "rc[0-9]{1,}")
        do
            /usr/bin/ir-keytable -a /etc/rc_maps.cfg --sysdev $remote
        done
    fi

    {% if standby_reload_dvb %}
    echo "restore dvb drivers"
    /usr/local/bin/module-helper -r
    {% endif %}

    # wait up to 10 seconds for the network
    timeout=0
    while [ -z "$(hostname --all-fqdns)" ]
    do
        echo "waiting for network..."
        sleep .5
        [ $(( timeout++ )) -ge 20 ] && break
    done

    # restore "_nfs._tcp" avahi announcements
    for file in /etc/avahi/services/*.disabled; do
        if grep -Fq "_nfs._tcp" "$file"; then
            echo "rename $file to ${file%%.*}.service"
            mv "$file" "${file%%.*}.service"
        fi
    done

    /bin/systemctl start vdr
    ;;
esac
